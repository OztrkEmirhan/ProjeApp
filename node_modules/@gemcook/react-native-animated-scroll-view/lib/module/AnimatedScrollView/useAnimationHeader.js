import { useCallback, useMemo, useRef } from 'react';
import { Animated, Platform } from 'react-native';
export const useAnimationHeader = _ref => {
  let {
    maxHeaderHeight,
    minHeaderHeight,
    onScroll,
    floating = false
  } = _ref;
  const heightAnim = useRef(new Animated.Value(0)).current;
  const offset = Platform.OS === 'ios' ? maxHeaderHeight : 0;
  const headerTop = useMemo(() => {
    if (floating) {
      return Animated.diffClamp(Animated.multiply(heightAnim, -1), minHeaderHeight - maxHeaderHeight, 0);
    }

    return heightAnim.interpolate({
      inputRange: [-offset, maxHeaderHeight - minHeaderHeight - offset],
      outputRange: [0, -(maxHeaderHeight - minHeaderHeight)],
      extrapolate: 'clamp'
    });
  }, [floating, offset, maxHeaderHeight, minHeaderHeight, heightAnim]);
  const contentInset = useMemo(() => ({
    top: maxHeaderHeight
  }), [maxHeaderHeight]);
  const contentOffset = useMemo(() => ({
    x: 0,
    y: -offset
  }), [offset]);
  const handleScroll = useCallback(event => {
    Animated.event([{
      nativeEvent: {
        contentOffset: {
          y: heightAnim
        }
      }
    }], {
      useNativeDriver: false,
      listener: event => {
        if (floating) {
          const offsetY = event.nativeEvent.contentOffset.y;

          if (offsetY < -maxHeaderHeight) {
            heightAnim.extractOffset();
          }
        }
      }
    })(event);
    onScroll === null || onScroll === void 0 ? void 0 : onScroll(event);
  }, [onScroll, heightAnim, maxHeaderHeight, floating]);
  return {
    headerTop,
    contentInset,
    contentOffset,
    handleScroll
  };
};
//# sourceMappingURL=useAnimationHeader.js.map