function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { Animated, FlatList } from 'react-native';
import styles, { getContentContainerStyle } from './styles';
import { useAnimationHeader } from '../useAnimationHeader';

const AnimationHeaderFlatList = _ref => {
  let {
    AnimationHeaderComponent,
    animationHeaderStyle,
    flatListRef,
    maxHeaderHeight,
    minHeaderHeight,
    contentContainerStyle,
    onScroll,
    scrollEventThrottle = 16,
    progressViewOffset,
    floating,
    ...flatListProps
  } = _ref;
  const {
    contentInset,
    contentOffset,
    handleScroll,
    headerTop
  } = useAnimationHeader({
    maxHeaderHeight,
    minHeaderHeight,
    onScroll,
    floating
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles.animatedContainer, {
      height: maxHeaderHeight
    }, animationHeaderStyle, {
      transform: [{
        translateY: headerTop
      }]
    }]
  }, AnimationHeaderComponent), /*#__PURE__*/React.createElement(FlatList, _extends({
    ref: flatListRef,
    contentInset: contentInset,
    progressViewOffset: progressViewOffset || maxHeaderHeight,
    contentOffset: contentOffset,
    contentContainerStyle: [getContentContainerStyle(maxHeaderHeight), contentContainerStyle],
    onScroll: handleScroll,
    scrollEventThrottle: scrollEventThrottle,
    scrollIndicatorInsets: contentInset
  }, flatListProps)));
};

export default AnimationHeaderFlatList;
//# sourceMappingURL=index.js.map