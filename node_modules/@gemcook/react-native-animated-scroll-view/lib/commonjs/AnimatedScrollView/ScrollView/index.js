"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _styles = _interopRequireWildcard(require("./styles"));

var _useAnimationHeader = require("../useAnimationHeader");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const AnimationHeaderScrollView = _ref => {
  let {
    AnimationHeaderComponent,
    animationHeaderStyle,
    scrollViewRef,
    maxHeaderHeight,
    minHeaderHeight,
    contentContainerStyle,
    onScroll,
    scrollEventThrottle = 16,
    children,
    floating,
    ...scrollViewProps
  } = _ref;
  const {
    contentInset,
    contentOffset,
    handleScroll,
    headerTop
  } = (0, _useAnimationHeader.useAnimationHeader)({
    maxHeaderHeight,
    minHeaderHeight,
    onScroll,
    floating
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: [_styles.default.animatedContainer, {
      height: maxHeaderHeight
    }, animationHeaderStyle, {
      transform: [{
        translateY: headerTop
      }]
    }]
  }, AnimationHeaderComponent), /*#__PURE__*/_react.default.createElement(_reactNative.ScrollView, _extends({
    ref: scrollViewRef,
    contentInset: contentInset,
    contentOffset: contentOffset,
    contentContainerStyle: [(0, _styles.getContentContainerStyle)(maxHeaderHeight), contentContainerStyle],
    onScroll: handleScroll,
    scrollEventThrottle: scrollEventThrottle,
    scrollIndicatorInsets: contentInset
  }, scrollViewProps), children));
};

var _default = AnimationHeaderScrollView;
exports.default = _default;
//# sourceMappingURL=index.js.map